trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'healthcheck-api'
  containerRegistry: 'autoscalehealthcheckacr.azurecr.io'
  repositoryName: 'healthcheck-api'
  resourceGroupName: 'autoscale-rg'
  # Service connection names (these need to be created in Azure DevOps)
  dockerRegistryServiceConnection: 'autoscalehealthcheckacr-docker'  # Docker Registry service connection
  azureServiceConnection: 'autoscalehealthcheckacr-arm'  # Azure Resource Manager service connection

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
      displayName: 'Use Python 3.10'

    - script: |
        cd src/healthcheck-api
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        cd src/healthcheck-api
        python -m pytest tests/ -v
      displayName: 'Run Unit Tests'

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'  # Docker Registry service connection
        repository: '$(repositoryName)'
        command: 'buildAndPush'
        Dockerfile: 'src/healthcheck-api/Dockerfile'
        buildContext: 'src/healthcheck-api'
        tags: |
          latest
          $(Build.BuildNumber)

- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: AzureCLI@2
      displayName: 'Install Terraform'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Terraform
          echo "Installing Terraform..."
          
          # Check if terraform is already installed
          if command -v terraform &> /dev/null; then
            echo "Terraform is already installed:"
            terraform version
          else
            echo "Terraform not found, installing..."
            wget -q https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
            unzip terraform_1.5.7_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            echo "Terraform installed successfully!"
          fi
          
          # Verify installation
          terraform version
          echo "Terraform installation verified!"

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Initialize Terraform
          echo "Starting Terraform Init..."
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Check if main.tf exists
          if [ ! -f "main.tf" ]; then
            echo "ERROR: main.tf not found in infrastructure directory!"
            exit 1
          fi
          
          # Check Azure CLI authentication
          echo "Checking Azure CLI authentication..."
          az account show
          
          # Clean up any existing state files if they exist and are corrupted
          if [ -f "terraform.tfstate" ]; then
            echo "Found existing Terraform state, backing up..."
            cp terraform.tfstate terraform.tfstate.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          
          # Verify initialization
          if [ -d ".terraform" ]; then
            echo "SUCCESS: Terraform initialized successfully!"
          else
            echo "ERROR: Terraform initialization failed!"
            exit 1
          fi

    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Plan Terraform changes
          echo "Starting Terraform Plan..."
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Check if Terraform is properly initialized
          if [ ! -d ".terraform" ]; then
            echo "ERROR: Terraform not initialized! .terraform directory not found."
            exit 1
          fi
          
          # Run terraform plan with detailed output
          echo "Running terraform plan..."
          terraform plan -out=tfplan -var="image_tag=$(Build.BuildNumber)"
          
          # Verify plan file was created
          if [ -f "tfplan" ]; then
            echo "SUCCESS: Terraform plan created successfully!"
          else
            echo "ERROR: Terraform plan file not created!"
            exit 1
          fi

    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Apply Terraform changes
          echo "Starting Terraform Apply..."
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          
          # Check if tfplan exists
          if [ -f "tfplan" ]; then
            echo "Found tfplan file, proceeding with apply..."
            
            # Run terraform apply with error handling
            if terraform apply -auto-approve tfplan; then
              echo "SUCCESS: Terraform apply completed successfully!"
            else
              echo "ERROR: Terraform apply failed!"
              echo "Checking for common issues..."
              
              # Check if it's a resource already exists error
              if terraform apply -auto-approve tfplan 2>&1 | grep -q "already exists"; then
                echo "DETECTED: Resource already exists error"
                echo "This may require importing existing resources or using data sources"
                echo "Please check the Terraform configuration and consider using data sources for existing resources"
              fi
              
              # Show terraform state for debugging
              echo "Current Terraform state:"
              terraform state list || echo "No state found"
              
              exit 1
            fi
          else
            echo "ERROR: tfplan file not found!"
            echo "Available files:"
            ls -la
            exit 1
          fi

    - task: AzureCLI@2
      displayName: 'Get Deployment Output'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Get the output URL
          echo "Getting deployment outputs..."
          
          # Check if terraform state exists
          if [ ! -f "terraform.tfstate" ]; then
            echo "WARNING: terraform.tfstate file not found"
            echo "Attempting to get outputs anyway..."
          fi
          
          # Try to get outputs with error handling
          if terraform output health_check_url &>/dev/null; then
            HEALTH_URL=$(terraform output -raw health_check_url)
            echo "Health Check API deployed successfully!"
            echo "URL: $HEALTH_URL"
            echo "##vso[task.setvariable variable=healthCheckUrl]$HEALTH_URL"
          else
            echo "ERROR: Could not get health_check_url output"
            echo "Available outputs:"
            terraform output || echo "No outputs available"
            exit 1
          fi

    - script: |
        echo "Deployment completed successfully!"
        echo "Health Check URL: $(healthCheckUrl)"
      displayName: 'Deployment Summary'
