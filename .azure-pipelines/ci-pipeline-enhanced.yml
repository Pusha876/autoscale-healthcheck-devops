trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

variables:
  imageName: 'healthcheck-api'
  containerRegistry: 'autoscalehealthcheckacr.azurecr.io'
  repositoryName: 'healthcheck-api'
  resourceGroupName: 'autoscale-rg'
  # Service connection names (these need to be created in Azure DevOps)
  dockerRegistryServiceConnection: 'autoscalehealthcheckacr-docker'  # Docker Registry service connection
  azureServiceConnection: 'autoscalehealthcheckacr-arm'  # Azure Resource Manager service connection

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.10'
      displayName: 'Use Python 3.10'

    - script: |
        cd src/healthcheck-api
        pip install -r requirements.txt
      displayName: 'Install Dependencies'

    - script: |
        cd src/healthcheck-api
        python -m pytest tests/ -v --tb=short
      displayName: 'Run Unit Tests'
      continueOnError: false

    - task: Docker@2
      displayName: 'Build and Push Docker Image'
      inputs:
        containerRegistry: '$(dockerRegistryServiceConnection)'
        repository: '$(repositoryName)'
        command: 'buildAndPush'
        Dockerfile: 'src/healthcheck-api/Dockerfile'
        buildContext: 'src/healthcheck-api'
        tags: |
          latest
          $(Build.BuildNumber)

    - script: |
        echo "Build completed successfully!"
        echo "Docker image: $(containerRegistry)/$(repositoryName):$(Build.BuildNumber)"
      displayName: 'Build Summary'

- stage: Deploy
  displayName: 'Deploy Infrastructure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - task: AzureCLI@2
      displayName: 'Install Terraform'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Install Terraform
          echo "Installing Terraform..."
          wget -q https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          unzip terraform_1.5.7_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform version
          echo "Terraform installed successfully!"

    - task: AzureCLI@2
      displayName: 'Terraform Init'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          echo "Terraform initialized successfully!"

    - task: AzureCLI@2
      displayName: 'Terraform Plan'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Plan Terraform changes
          echo "Planning Terraform changes..."
          terraform plan -out=tfplan -var="image_tag=$(Build.BuildNumber)"
          echo "Terraform plan completed successfully!"

    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Apply Terraform changes
          echo "Applying Terraform changes..."
          terraform apply -auto-approve tfplan
          echo "Terraform apply completed successfully!"

    - task: AzureCLI@2
      displayName: 'Get Deployment Output and Verify'
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        workingDirectory: 'infrastructure'
        inlineScript: |
          # Get the output URLs
          echo "Getting deployment outputs..."
          HEALTH_URL=$(terraform output -raw health_check_url)
          APP_URL=$(terraform output -raw app_url)
          APP_FQDN=$(terraform output -raw app_fqdn)
          
          echo "Deployment outputs:"
          echo "  Health Check URL: $HEALTH_URL"
          echo "  App URL: $APP_URL"
          echo "  App FQDN: $APP_FQDN"
          
          # Set pipeline variables
          echo "##vso[task.setvariable variable=healthCheckUrl]$HEALTH_URL"
          echo "##vso[task.setvariable variable=appUrl]$APP_URL"
          echo "##vso[task.setvariable variable=appFqdn]$APP_FQDN"
          
          # Wait for container to be ready
          echo "Waiting for container to be ready..."
          sleep 30
          
          # Test the health endpoint
          echo "Testing health endpoint..."
          for i in {1..10}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          done
          
          # Final verification
          echo "Final verification:"
          curl -s "$HEALTH_URL" || echo "Health check failed"

    - script: |
        echo "=================================="
        echo "   DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "=================================="
        echo "Health Check URL: $(healthCheckUrl)"
        echo "Application URL: $(appUrl)"
        echo "Container FQDN: $(appFqdn)"
        echo "Docker Image: $(containerRegistry)/$(repositoryName):$(Build.BuildNumber)"
        echo "=================================="
      displayName: 'Deployment Summary'
